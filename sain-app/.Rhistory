library(shiny)
runApp()
runApp()
runApp()
?mainPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
d[3500 : 3500 + 10, ]
d[3500 : 3500 + 10, ]
d[3500 : 3500 + 10, ]
d[3500 : 35010, ]
d[3500 : 3510, ]
d[3500 : 3500 + 10, ]
d[3500 : (3500 + 10), ]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
glm_smote_produtivo(d, 3500, 10)
glm_smote_produtivo(d, 3500, 10)
glm_smote_produtivo <- function(dataset, tempo, n_clientes) {
dados_treino <- dataset[1: (tempo + 1), ]
smote <- SMOTE(Y ~ ., dados_treino, perc.over = 250, k = 10, perc.under = 150)
glm <- glm(Y ~ ., family = binomial(link = "logit"), data = smote)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes + 1), ]
dataset$glm <- predict.glm(glm, dados_a_prever, type = "response")
dataset[(tempo + 1) : (tempo + n_clientes + 1), ]
}
glm_smote_produtivo(d, 3500, 10)
glm_smote_produtivo <- function(dataset, tempo, n_clientes) {
dados_treino <- dataset[1: (tempo + 1), ]
smote <- SMOTE(Y ~ ., dados_treino, perc.over = 250, k = 10, perc.under = 150)
glm <- glm(Y ~ ., family = binomial(link = "logit"), data = smote)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes + 1), ]
dados_a_prever$glm <- predict.glm(glm, dados_a_prever, type = "response")
dataset[(tempo + 1) : (tempo + n_clientes + 1), ]
}
glm_smote_produtivo(d, 3500, 10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?h1
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dataTableOutput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tabu_search_repair_restricao(10)
source("preparacao_dados.R")
source("geral_otimizacao.R")
library(tabuSearch)
tempo <- 3500
binary_to_products <- function(solucao){
sol_bin <- split(solucao, ceiling(seq_along(solucao) / 5))
produtos <- c();
for (i in 1:length(sol_bin)){
if (is.na(match(1, sol_bin[[i]])))
produto <- 0
else
produto <- match(1, sol_bin[[i]])
produtos <- c(produtos, produto)
}
produtos
}
solucao_inicial <- function(N){
sol <- c()
for (i in 1:N){
sol <- c(sol, sample(c(rep(0, 4), 1)))
}
sol
}
solucao_inicial_restricao <- function(N){
sol <- c()
for (i in 1:floor(N / 2)){
sol <- c(sol, sample(c(sample(c(rep(0, 4), 1)), rep(0, 5))))
}
sol
}
eval_tabu_repair <- function(solucao) {
solucao <- binary_to_products(solucao)
solucao <- repair(solucao)
profit(solucao)
}
eval_tabu_restricao_repair <- function(solucao) {
solucao <- binary_to_products(solucao)
solucao <- repair_restricao(solucao)
profit(solucao)
}
tabu_search_repair <- function(N) {
melhor_lucro <- -Inf
for (i in 1:10) {
solucao_inicial <- solucao_inicial(N)
solucao <- tabuSearch(50, objFunc = eval_tabu_repair, config = solucao_inicial, iters = 2)
b <- which.max(solucao$eUtilityKeep)
lucro <- solucao$eUtilityKeep[b]
cat("Execucao:", i, " Solucao: ", repair(binary_to_products(solucao$configKeep[b, ])), "Lucro: ", lucro, "\n")
if (lucro > melhor_lucro) {
melhor_solucao <- solucao
melhor_lucro <- lucro
}
}
b <- which.max(melhor_solucao$eUtilityKeep)
solucao <- binary_to_products(melhor_solucao$configKeep[b, ])
cat(">>> Melhor Solucao: ", solucao, "Lucro:", melhor_lucro, "\n")
list(solucao = solucao, lucro = melhor_lucro)
}
tabu_search_repair_restricao <- function(N) {
melhor_lucro <- -Inf
for (i in 1:10) {
solucao_inicial <- solucao_inicial_restricao(N)
solucao <- tabuSearch(50, objFunc = eval_tabu_restricao_repair, config = solucao_inicial, iters = 2)
b <- which.max(solucao$eUtilityKeep)
lucro <- solucao$eUtilityKeep[b]
cat("Execucao:", i, " Solucao: ", repair_restricao(binary_to_products(solucao$configKeep[b, ])), "Lucro: ", lucro, "\n")
if (lucro > melhor_lucro) {
melhor_solucao <- solucao
melhor_lucro <- lucro
}
}
b <- which.max(melhor_solucao$eUtilityKeep)
solucao <- binary_to_products(melhor_solucao$configKeep[b, ])
cat(">>> Melhor Solucao: ", solucao, "Lucro:", melhor_lucro, "\n")
list(solucao = solucao, lucro = melhor_lucro, s = melhor_solucao, b = which.max(melhor_solucao$eUtilityKeep))
}
tabu_search_repair_restricao(10)
tabu_search_repair(10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
random_forest_undersampling_produtivo(d, 3500, 10)
random_forest_undersampling_produtivo <- function(dataset, tempo, n_clientes) {
dados_treino <- dataset[1: (tempo + 1), ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes), ]
dados_a_prever$random_forest <- predict(random_forest, dados_a_prever, type = "prob")
dados_a_prever[,1][dados_a_prever >= 0.5] <- 1
dados_a_prever[,1][dados_a_prever < 0.5] <- 0
dados_a_prever[,1]
}
random_forest_undersampling_produtivo(d, 3500, 10)
random_forest_undersampling_produtivo <- function(dataset, tempo, n_clientes) {
dados_treino <- dataset[1: (tempo + 1), ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes), ]
dados_a_prever$random_forest <- predict(random_forest, dados_a_prever, type = "prob")
print(dados_a_prever$random_forest)
dados_a_prever[,1][dados_a_prever >= 0.5] <- 1
dados_a_prever[,1][dados_a_prever < 0.5] <- 0
dados_a_prever[,1]
}
random_forest_undersampling_produtivo(d, 3500, 10)
tempo <- 3500
n_clientes <- 10
dataset <- d
dados_treino <- dataset[1: (tempo + 1), ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes), ]
dados_a_prever$random_forest <- predict(random_forest, dados_a_prever, type = "prob")
print(dados_a_prever$random_forest)
dados_a_prever[,1][dados_a_prever >= 0.5] <- 1
dados_a_prever[,1]
dados_a_prever[,2]
dados_a_prever$random_forest[dados_a_prever >= 0.5] <- 1
dados_a_prever$random_forest
dados_a_prever$random_forest[,1][dados_a_prever >= 0.5] <- 1
dados_a_prever$random_forest[,1][dados_a_prever >= 0.5]
dados_a_prever$random_forest
dados_a_prever$random_forest[,1]
dados_a_prever$random_forest[,2]
dados_a_prever$random_forest[dados_a_prever >= 0.5,1] <- 1
glm_smote_produtivo(d, 3500, 10)
dados_a_prever$random_forest <- as.vector(dados_a_prever$random_forest[, 1])
dados_a_prever$random_forest[dados_a_prever$random_forest < 0.5] <- 0
random_forest_undersampling_produtivo(d, 3500, 10)
random_forest_undersampling_produtivo <- function(dataset, tempo, n_clientes) {
dados_treino <- dataset[1: (tempo + 1), ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes), ]
dados_a_prever$random_forest <- predict(random_forest, dados_a_prever, type = "prob")
print(dados_a_prever$random_forest)
dados_a_prever$random_forest <- as.vector(dados_a_prever$random_forest[, 1])
dados_a_prever$random_forest[dados_a_prever$random_forest < 0.5] <- 0
dados_a_prever$random_forest[dados_a_prever$random_forest >= 0.5] <- 1
dados_a_prever
}
random_forest_undersampling_produtivo(d, 3500, 10)
source("preparacao_dados.R")
source("geral.R")
library(rminer)
library(DMwR)
library(randomForest)
set.seed(12345)
random_forest_desbalanceados <- function(dataset) {
# primeiros 70% do dataset para treino ultimos 30% para teste
holdout <- holdout(dataset$Y, ratio = 0.7, mode = "order")
dados_treino <- dataset[holdout$tr, ]
dados_teste <- dataset[holdout$ts, ]
random_forest <- randomForest(Y ~ ., data = dados_treino)
previsoes <- predict(random_forest, dados_teste, type = "prob")
metrics(dados_teste$Y, previsoes, "RANDOM FOREST Desbalanceados")
}
random_forest_smote <- function(dataset) {
holdout <- holdout(dataset$Y, ratio = 0.7, mode = "order")
dados_treino <- dataset[holdout$tr, ]
dados_teste <- dataset[holdout$ts, ]
smote <- SMOTE(Y ~ ., dados_treino, perc.over = 250, k = 10, perc.under = 150)
random_forest <- randomForest(Y ~ ., data = smote)
previsoes <- predict(random_forest, dados_teste, type = "prob")
metrics(dados_teste$Y, previsoes, "RANDOM FOREST SMOTE")
}
random_forest_oversampling <- function(dataset) {
holdout <- holdout(dataset$Y, ratio = 0.7, mode = "order")
dados_teste <- dataset[holdout$ts, ]
oversampling <- oversampling(holdout, dataset)
random_forest <- randomForest(Y ~ ., data = oversampling)
previsoes <- predict(random_forest, dados_teste, type = "prob")
metrics(dados_teste$Y, previsoes, "RANDOM FOREST Oversampling")
}
random_forest_undersampling <- function(dataset) {
holdout <- holdout(dataset$Y, ratio = 0.7, mode = "order")
dados_teste <- dataset[holdout$ts, ]
dados_treino <- dataset[holdout$tr, ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
previsoes <- predict(random_forest, dados_teste, type = "prob")
metrics(dados_teste$Y, previsoes, "RANDOM FOREST Undersampling")
}
random_forest_rolling_desbalanceados <- function(dataset) {
reais <- character()
previsoes <- matrix(ncol = 2)
iteracoes <- 30
for (i in 1:iteracoes){
holdout <- holdout(
dataset$Y,
ratio = 200,
mode = "rolling",
iter = i,
window = 3000,
increment = 60)
dados_treino <-  dataset[holdout$tr, ]
dados_teste <- dataset[holdout$ts, ]
random_forest <- randomForest(Y ~ ., data = dados_treino)
if (i == 1)
previsoes <- predict(random_forest, dados_teste, type = "prob")
else
previsoes <- rbind(previsoes, predict(random_forest, dados_teste, type = "prob"))
reais <- c(reais, as.character(dados_teste$Y))
}
reais <- factor(reais)
metrics(reais, previsoes, "RANDOM FOREST Rolling Desbalanceados")
}
random_forest_rolling_smote <- function(dataset) {
reais <- character()
previsoes <- matrix(ncol = 2)
iteracoes <- 30
for (i in 1:iteracoes){
holdout <- holdout(
dataset$Y,
ratio = 200,
mode = "rolling",
iter = i,
window = 3000,
increment = 60)
dados_treino <-  dataset[holdout$tr, ]
dados_teste <- dataset[holdout$ts, ]
s <- SMOTE(Y ~ ., dados_treino, perc.over = 250, k = 10, perc.under = 150)
random_forest <- randomForest(Y ~ ., data = s)
if (i == 1)
previsoes <- predict(random_forest, dados_teste, type = "prob")
else
previsoes <- rbind(previsoes, predict(random_forest, dados_teste, type = "prob"))
reais <- c(reais, as.character(dados_teste$Y))
}
reais <- factor(reais)
metrics(reais, previsoes, "RANDOM FOREST Rolling SMOTE")
}
random_forest_rolling_oversampling <- function(dataset) {
reais <- character()
previsoes <- matrix(ncol = 2)
iteracoes <- 30
for (i in 1:iteracoes){
holdout <- holdout(
dataset$Y,
ratio = 200,
mode = "rolling",
iter = i,
window = 3000,
increment = 60)
dados_teste <- dataset[holdout$ts, ]
oversampling <- oversampling(holdout, dataset)
random_forest <- randomForest(Y ~ ., data = oversampling)
if (i == 1)
previsoes <- predict(random_forest, dados_teste, type = "prob")
else
previsoes <- rbind(previsoes, predict(random_forest, dados_teste, type = "prob"))
reais <- c(reais, as.character(dados_teste$Y))
}
reais <- factor(reais)
metrics(reais, previsoes, "RANDOM FOREST Rolling Oversampling")
}
random_forest_rolling_undersampling <- function(dataset) {
reais <- character()
previsoes <- matrix(ncol = 2)
iteracoes <- 30
for (i in 1:iteracoes){
holdout <- holdout(
dataset$Y,
ratio = 200,
mode = "rolling",
iter = i,
window = 3000,
increment = 60)
dados_teste <- dataset[holdout$ts, ]
dados_treino <- dataset[holdout$tr, ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
if (i == 1)
previsoes <- predict(random_forest, dados_teste, type = "prob")
else
previsoes <- rbind(previsoes, predict(random_forest, dados_teste, type = "prob"))
reais <- c(reais, as.character(dataset[holdout$ts, ]$Y))
}
reais <- factor(reais)
metrics(reais, previsoes, "RANDOM FOREST Rolling Undersampling")
}
random_forest_undersampling_produtivo <- function(dataset, tempo, n_clientes) {
dados_treino <- dataset[1: (tempo + 1), ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes), ]
dados_a_prever$random_forest <- predict(random_forest, dados_a_prever, type = "prob")
print(dados_a_prever$random_forest)
dados_a_prever$random_forest <- as.vector(dados_a_prever$random_forest[, 1])
dados_a_prever$random_forest[dados_a_prever$random_forest < 0.5] <- 0
dados_a_prever$random_forest[dados_a_prever$random_forest >= 0.5] <- 1
dados_a_prever
}
random_forest_undersampling_produtivo(d, 3500, 10)
random_forest_undersampling_produtivo <- function(dataset, tempo, n_clientes) {
dados_treino <- dataset[1: (tempo + 1), ]
undersampling <- undersampling(dados_treino, dataset)
random_forest <- randomForest(Y ~ ., data = undersampling)
dados_a_prever <- dataset[(tempo + 1) : (tempo + n_clientes), ]
dados_a_prever$random_forest <- predict(random_forest, dados_a_prever, type = "prob")
print(dados_a_prever$random_forest)
dados_a_prever$random_forest <- as.vector(dados_a_prever$random_forest[, 2])
dados_a_prever$random_forest[dados_a_prever$random_forest < 0.5] <- 0
dados_a_prever$random_forest[dados_a_prever$random_forest >= 0.5] <- 1
dados_a_prever
}
random_forest_undersampling_produtivo(d, 3500, 10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if(sdfdfhndg) TRUE
?tryCatch
source('~/.active-rstudio-document', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
